# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: anki/import_export.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from anki import cards_pb2 as anki_dot_cards__pb2
from anki import collection_pb2 as anki_dot_collection__pb2
from anki import notes_pb2 as anki_dot_notes__pb2
from anki import generic_pb2 as anki_dot_generic__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x18\x61nki/import_export.proto\x12\x12\x61nki.import_export\x1a\x10\x61nki/cards.proto\x1a\x15\x61nki/collection.proto\x1a\x10\x61nki/notes.proto\x1a\x12\x61nki/generic.proto\"o\n\x1eImportCollectionPackageRequest\x12\x10\n\x08\x63ol_path\x18\x01 \x01(\t\x12\x13\n\x0b\x62\x61\x63kup_path\x18\x02 \x01(\t\x12\x14\n\x0cmedia_folder\x18\x03 \x01(\t\x12\x10\n\x08media_db\x18\x04 \x01(\t\"Y\n\x1e\x45xportCollectionPackageRequest\x12\x10\n\x08out_path\x18\x01 \x01(\t\x12\x15\n\rinclude_media\x18\x02 \x01(\x08\x12\x0e\n\x06legacy\x18\x03 \x01(\x08\"0\n\x18ImportAnkiPackageRequest\x12\x14\n\x0cpackage_path\x18\x01 \x01(\t\"\x84\x06\n\x0eImportResponse\x12+\n\x07\x63hanges\x18\x01 \x01(\x0b\x32\x1a.anki.collection.OpChanges\x12\x33\n\x03log\x18\x02 \x01(\x0b\x32&.anki.import_export.ImportResponse.Log\x1a\x36\n\x04Note\x12\x1e\n\x02id\x18\x01 \x01(\x0b\x32\x12.anki.notes.NoteId\x12\x0e\n\x06\x66ields\x18\x02 \x03(\t\x1a\xd7\x04\n\x03Log\x12\x34\n\x03new\x18\x01 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12\x38\n\x07updated\x18\x02 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12:\n\tduplicate\x18\x03 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12<\n\x0b\x63onflicting\x18\x04 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12\x42\n\x11\x66irst_field_match\x18\x05 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12\x41\n\x10missing_notetype\x18\x06 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12=\n\x0cmissing_deck\x18\x07 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12\x42\n\x11\x65mpty_first_field\x18\x08 \x03(\x0b\x32\'.anki.import_export.ImportResponse.Note\x12G\n\x0f\x64upe_resolution\x18\t \x01(\x0e\x32..anki.import_export.CsvMetadata.DupeResolution\x12\x13\n\x0b\x66ound_notes\x18\n \x01(\r\"\x99\x01\n\x18\x45xportAnkiPackageRequest\x12\x10\n\x08out_path\x18\x01 \x01(\t\x12\x17\n\x0fwith_scheduling\x18\x02 \x01(\x08\x12\x12\n\nwith_media\x18\x03 \x01(\x08\x12\x0e\n\x06legacy\x18\x04 \x01(\x08\x12.\n\x05limit\x18\x05 \x01(\x0b\x32\x1f.anki.import_export.ExportLimit\"\xaf\x01\n\x0fPackageMetadata\x12<\n\x07version\x18\x01 \x01(\x0e\x32+.anki.import_export.PackageMetadata.Version\"^\n\x07Version\x12\x13\n\x0fVERSION_UNKNOWN\x10\x00\x12\x14\n\x10VERSION_LEGACY_1\x10\x01\x12\x14\n\x10VERSION_LEGACY_2\x10\x02\x12\x12\n\x0eVERSION_LATEST\x10\x03\"\xbf\x01\n\x0cMediaEntries\x12<\n\x07\x65ntries\x18\x01 \x03(\x0b\x32+.anki.import_export.MediaEntries.MediaEntry\x1aq\n\nMediaEntry\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04size\x18\x02 \x01(\r\x12\x0c\n\x04sha1\x18\x03 \x01(\x0c\x12!\n\x13legacy_zip_filename\x18\xff\x01 \x01(\rH\x00\x88\x01\x01\x42\x16\n\x14_legacy_zip_filename\"S\n\x10ImportCsvRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x31\n\x08metadata\x18\x02 \x01(\x0b\x32\x1f.anki.import_export.CsvMetadata\"\xbf\x01\n\x12\x43svMetadataRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x41\n\tdelimiter\x18\x02 \x01(\x0e\x32).anki.import_export.CsvMetadata.DelimiterH\x00\x88\x01\x01\x12\x18\n\x0bnotetype_id\x18\x03 \x01(\x03H\x01\x88\x01\x01\x12\x14\n\x07is_html\x18\x04 \x01(\x08H\x02\x88\x01\x01\x42\x0c\n\n_delimiterB\x0e\n\x0c_notetype_idB\n\n\x08_is_html\"\xc4\x06\n\x0b\x43svMetadata\x12<\n\tdelimiter\x18\x01 \x01(\x0e\x32).anki.import_export.CsvMetadata.Delimiter\x12\x0f\n\x07is_html\x18\x02 \x01(\x08\x12\x13\n\x0bglobal_tags\x18\x03 \x03(\t\x12\x14\n\x0cupdated_tags\x18\x04 \x03(\t\x12\x15\n\rcolumn_labels\x18\x05 \x03(\t\x12\x11\n\x07\x64\x65\x63k_id\x18\x06 \x01(\x03H\x00\x12\x15\n\x0b\x64\x65\x63k_column\x18\x07 \x01(\rH\x00\x12I\n\x0fglobal_notetype\x18\x08 \x01(\x0b\x32..anki.import_export.CsvMetadata.MappedNotetypeH\x01\x12\x19\n\x0fnotetype_column\x18\t \x01(\rH\x01\x12\x13\n\x0btags_column\x18\n \x01(\r\x12\x17\n\x0f\x66orce_delimiter\x18\x0b \x01(\x08\x12\x15\n\rforce_is_html\x18\x0c \x01(\x08\x12)\n\x07preview\x18\r \x03(\x0b\x32\x18.anki.generic.StringList\x12\x13\n\x0bguid_column\x18\x0e \x01(\r\x12G\n\x0f\x64upe_resolution\x18\x0f \x01(\x0e\x32..anki.import_export.CsvMetadata.DupeResolution\x12?\n\x0bmatch_scope\x18\x10 \x01(\x0e\x32*.anki.import_export.CsvMetadata.MatchScope\x1a\x33\n\x0eMappedNotetype\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x15\n\rfield_columns\x18\x02 \x03(\r\"9\n\x0e\x44upeResolution\x12\n\n\x06UPDATE\x10\x00\x12\x0c\n\x08PRESERVE\x10\x01\x12\r\n\tDUPLICATE\x10\x02\"N\n\tDelimiter\x12\x07\n\x03TAB\x10\x00\x12\x08\n\x04PIPE\x10\x01\x12\r\n\tSEMICOLON\x10\x02\x12\t\n\x05\x43OLON\x10\x03\x12\t\n\x05\x43OMMA\x10\x04\x12\t\n\x05SPACE\x10\x05\"1\n\nMatchScope\x12\x0c\n\x08NOTETYPE\x10\x00\x12\x15\n\x11NOTETYPE_AND_DECK\x10\x01\x42\x06\n\x04\x64\x65\x63kB\n\n\x08notetype\"k\n\x14\x45xportCardCsvRequest\x12\x10\n\x08out_path\x18\x01 \x01(\t\x12\x11\n\twith_html\x18\x02 \x01(\x08\x12.\n\x05limit\x18\x03 \x01(\x0b\x32\x1f.anki.import_export.ExportLimit\"\xbb\x01\n\x14\x45xportNoteCsvRequest\x12\x10\n\x08out_path\x18\x01 \x01(\t\x12\x11\n\twith_html\x18\x02 \x01(\x08\x12\x11\n\twith_tags\x18\x03 \x01(\x08\x12\x11\n\twith_deck\x18\x04 \x01(\x08\x12\x15\n\rwith_notetype\x18\x05 \x01(\x08\x12\x11\n\twith_guid\x18\x06 \x01(\x08\x12.\n\x05limit\x18\x07 \x01(\x0b\x32\x1f.anki.import_export.ExportLimit\"\xac\x01\n\x0b\x45xportLimit\x12/\n\x10whole_collection\x18\x01 \x01(\x0b\x32\x13.anki.generic.EmptyH\x00\x12\x11\n\x07\x64\x65\x63k_id\x18\x02 \x01(\x03H\x00\x12\'\n\x08note_ids\x18\x03 \x01(\x0b\x32\x13.anki.notes.NoteIdsH\x00\x12\'\n\x08\x63\x61rd_ids\x18\x04 \x01(\x0b\x32\x13.anki.cards.CardIdsH\x00\x42\x07\n\x05limit2\x8b\x07\n\x13ImportExportService\x12\x62\n\x17ImportCollectionPackage\x12\x32.anki.import_export.ImportCollectionPackageRequest\x1a\x13.anki.generic.Empty\x12\x62\n\x17\x45xportCollectionPackage\x12\x32.anki.import_export.ExportCollectionPackageRequest\x1a\x13.anki.generic.Empty\x12\x65\n\x11ImportAnkiPackage\x12,.anki.import_export.ImportAnkiPackageRequest\x1a\".anki.import_export.ImportResponse\x12W\n\x11\x45xportAnkiPackage\x12,.anki.import_export.ExportAnkiPackageRequest\x1a\x14.anki.generic.UInt32\x12Y\n\x0eGetCsvMetadata\x12&.anki.import_export.CsvMetadataRequest\x1a\x1f.anki.import_export.CsvMetadata\x12U\n\tImportCsv\x12$.anki.import_export.ImportCsvRequest\x1a\".anki.import_export.ImportResponse\x12O\n\rExportNoteCsv\x12(.anki.import_export.ExportNoteCsvRequest\x1a\x14.anki.generic.UInt32\x12O\n\rExportCardCsv\x12(.anki.import_export.ExportCardCsvRequest\x1a\x14.anki.generic.UInt32\x12J\n\x0eImportJsonFile\x12\x14.anki.generic.String\x1a\".anki.import_export.ImportResponse\x12L\n\x10ImportJsonString\x12\x14.anki.generic.String\x1a\".anki.import_export.ImportResponseB\x02P\x01\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'anki.import_export_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'P\001'
  _IMPORTCOLLECTIONPACKAGEREQUEST._serialized_start=127
  _IMPORTCOLLECTIONPACKAGEREQUEST._serialized_end=238
  _EXPORTCOLLECTIONPACKAGEREQUEST._serialized_start=240
  _EXPORTCOLLECTIONPACKAGEREQUEST._serialized_end=329
  _IMPORTANKIPACKAGEREQUEST._serialized_start=331
  _IMPORTANKIPACKAGEREQUEST._serialized_end=379
  _IMPORTRESPONSE._serialized_start=382
  _IMPORTRESPONSE._serialized_end=1154
  _IMPORTRESPONSE_NOTE._serialized_start=498
  _IMPORTRESPONSE_NOTE._serialized_end=552
  _IMPORTRESPONSE_LOG._serialized_start=555
  _IMPORTRESPONSE_LOG._serialized_end=1154
  _EXPORTANKIPACKAGEREQUEST._serialized_start=1157
  _EXPORTANKIPACKAGEREQUEST._serialized_end=1310
  _PACKAGEMETADATA._serialized_start=1313
  _PACKAGEMETADATA._serialized_end=1488
  _PACKAGEMETADATA_VERSION._serialized_start=1394
  _PACKAGEMETADATA_VERSION._serialized_end=1488
  _MEDIAENTRIES._serialized_start=1491
  _MEDIAENTRIES._serialized_end=1682
  _MEDIAENTRIES_MEDIAENTRY._serialized_start=1569
  _MEDIAENTRIES_MEDIAENTRY._serialized_end=1682
  _IMPORTCSVREQUEST._serialized_start=1684
  _IMPORTCSVREQUEST._serialized_end=1767
  _CSVMETADATAREQUEST._serialized_start=1770
  _CSVMETADATAREQUEST._serialized_end=1961
  _CSVMETADATA._serialized_start=1964
  _CSVMETADATA._serialized_end=2800
  _CSVMETADATA_MAPPEDNOTETYPE._serialized_start=2539
  _CSVMETADATA_MAPPEDNOTETYPE._serialized_end=2590
  _CSVMETADATA_DUPERESOLUTION._serialized_start=2592
  _CSVMETADATA_DUPERESOLUTION._serialized_end=2649
  _CSVMETADATA_DELIMITER._serialized_start=2651
  _CSVMETADATA_DELIMITER._serialized_end=2729
  _CSVMETADATA_MATCHSCOPE._serialized_start=2731
  _CSVMETADATA_MATCHSCOPE._serialized_end=2780
  _EXPORTCARDCSVREQUEST._serialized_start=2802
  _EXPORTCARDCSVREQUEST._serialized_end=2909
  _EXPORTNOTECSVREQUEST._serialized_start=2912
  _EXPORTNOTECSVREQUEST._serialized_end=3099
  _EXPORTLIMIT._serialized_start=3102
  _EXPORTLIMIT._serialized_end=3274
  _IMPORTEXPORTSERVICE._serialized_start=3277
  _IMPORTEXPORTSERVICE._serialized_end=4184
# @@protoc_insertion_point(module_scope)
